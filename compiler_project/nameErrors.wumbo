int exists;
bool exists2;
bool c;
bool d;
//test multiply declared
bool d;
//test multiply declared and void
void d;

struct Pencil{int red;};

struct Pen{int baby;struct Pencil grow;};

struct Point{int a;int b;struct Pen t;};

//test struct body errors
struct Point2{int x;void x;int a;int a;};

//check that multiply declared struct body is still processed
struct Point2{void a; int a; bool a;};

int hello(int red, int blue,bool hello) {
    int hi;
    int bye;
   int arbies;
	struct DoesntExist blue;
		
	int Pencil;
	//Invalid struct type and multiply declared	 
	struct Pencil Pencil;
	struct Point k;

	blue.bad = 5;
	//dot access on nonstruct type
	Pencil.fire = true;
	k.a = 2;
	k.b = 5;
	//invalid field of struct
	k.c = 4;
	//nonexistant struct field nested
	k.t.boy.red = 4;
	//dot access on nonstruct type nested
	k.t.baby.blue = 4;

	//more nested tests
	k.t.grow.orange = true;
	k.t.grow.red = true;
	k.a.boy = fairy;
	
	exists = 3;
	cin >> exists2;

}

//formal list multiply declared
bool hello2(bool where, int know, int where) {
	//multiply declared b/w formals and func bodyy
	bool know;
	struct Point2 Point2;
	Point2.x = 2;
	Point2.a = 3;
	Point2.dne = true;
	know = true;
	where = false;
	//variable not declared 
	arbies = 6;
}

//check that multiply declared function still process body
int hello2(int save, bool load) {
	bool save;
	int load;
	//test if, still process despite error
	if(where =2) {
		bool c;
		bool d;
		bool save;
		//test cin
		cin >> f.ff;
		load = 5;
		
	} else {
	int c;
	int d;
	bool d;
	void f;
	//void not processed
	f = 4;
		//test while scope
		while(dexists-dexists2) {
			bool load;
			save = 3;
			da = false;
		}
	}
}

//test various statements and expressions w/ undeclared variables
int teststatement(void ui) {
	if(tree+wood/axe-water != plant) {
		cout << wood > water;
		cout << rock < paper;
	}
	bat.tab++;
	folks.bat--;
	repeat(tree*wine+beer) {
		return 6+alll;
	}
	wood = testf1(randd,false);
	tree = true+7+!actual;
	return 5 >= axe;
	return 7<= sword;
	brave(brave);

}
