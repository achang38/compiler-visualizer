int exists;
bool exists2;
bool c;
bool d;
struct First{
    bool gray;
    int wonder;
};

struct Pencil{
    int red;
    struct First First;
};

struct Pen{
    int baby;
    struct Pencil grow;
};

struct Point{
    int a;
    int b;
    struct Pen t;
};

struct Point2{
    int x;
    int a;
};

int hello(bool hello, int blue, int red) {
    int hi;
    int bye;
    int arbies;
    struct Pencil Pencil;
    struct Point k;
    Pencil.red = true;
    k.a = 2;
    k.b = 5;
    k.t.baby = 4;
    k.t.grow.red = 4;
    k.t.grow.First.wonder = 10;
    hi = 3;
    cin >> arbies;
}

bool hello2(int where2, int know, bool where) {
    bool know2;
    struct Point2 Point2;
    Point2.x = 2;
    Point2.a = 3;
    know = true;
    where = false;
    exists = 1;
}

int hello3(bool load, int save) {
    bool save2;
    int load2;
    struct Point beak;
    if ((c = 2)) {
        bool c;
        bool d;
        bool save;
        cin >> beak.t.baby;
        load = 5;
    }
    else {
        int c;
        int d;
        bool e;
        int f;
        f = 4;
        while ((exists - exists2)) {
            bool load;
            save2 = 3;
            f = false;
        }
    }
}

int global1;
int global2;
bool global3;
bool tree;
bool wood;
bool axe;
void teststatement(bool ur, int ui) {
    int tree;
    int wood;
    int axe;
    int water;
    int plant;
    bool rock;
    bool paper;
    if ((((tree + (wood / axe)) - water) != plant)) {
        int rock;
        int paper;
        bool wood;
        cout << (wood > water);
        cout << (rock < paper);
    }
    global1++;
    global2--;
    exists2(((true && global1) && tree));
    return ((Pencil + 55) || Pen);
    repeat (((tree * hello2) + rock)) {
        return (6 + axe);
    }
    wood = hello3(Point2, false);
    tree = ((true + 7) + (!global3));
    return (5 >= axe);
    return (7 <= plant);
    hello(hello);
    hello2(1, 2, 3);
}

