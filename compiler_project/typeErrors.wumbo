int a;
int b;
bool c;
bool d;

struct Max {
	bool mini;
};

struct Hello {
	int red;
	int blue;
	bool rainbow;
};
struct Hello hello2;
struct Max watermelon;

int lotsOfParam(int bag,bool forest,int eyes, int hair, bool fast) {

}

void pear() {

}

void snake() {
	int lion;
	return 5;
	return lion();
}

int test1(int red, bool tree) {
	bool yt;
	int yt2;
	yt2 = true;


}

bool great(int fire) {
	//write function
	cout << test1;
	//write struct name
	cout << Hello;
	//write struct variable
	cout << hello2;
	
	cout << test1(2,true);
	//write void
	cout << snake();

	//test read errors
	cin >> test1;
	cin >> Hello;
	cin >> hello2;

	//arithmetic operators
	return 4+false+"faskk";
	return 4-great(2)-c;
	return true*c*d*44*b;
	a = b/c/d/Hello/hello2;
	hello2.rainbow++;
	c--;
	hello2.red = -c;

	//relational operator
	a = "Maybe">pear;
	a = Hello<hello2;
	b = great(2)<=snake();
	b = false>= true;

	//logical operators
	cout << 5||pear;
	great(55&&"fire");
	c = !(1+2+a);
	
	//test assign
	a = "Hello";
	b = great;
	great = test1;
	Max = Hello;
	hello2 = watermelon;
	
	//equality operators
	a = a == false;
	b = b != snake();
	c = pear() == snake();
	c =pear == snake;
	cout << pear() != snake();
	cout << great != test1;
	return Hello == Max;
	great(hello2 == watermelon);
	d = Hello != Max;
	d = hello2 != watermelon;
	
	//calling other than func
	fire(2,3,4);
	//wrong num of arguments
	snake(true,false);
	test1();
	test1(2,true);
	test1(1);
	
	//calling function w/ wrong type arg
	lotsOfParam(test1(2,3),great(a,b),6,a(),test1(b,c));


	if(3+true) {
		int treat;
		treat = false;
	}

	//non-bool if
	if(77/66) {
		bool treat2;
		treat2 = 4+false;
	}

	//non-bool if
	if("Cat") {
		int a;
		bool b;
		a = b+a;
	} else {
		bool maze;
		int okk;
		return okk;
	}

	if(45*false) {
		cout << Hello;
	}else{}

	//non-bool while
	while(4+5+6) {
		int a;
		a = false;
	}

	while(fire(2,3,4)) {
		great(false);
	}
	
	//non-int repeat
	repeat(7>6) {
		if("Baby") {
			int a;
			a = a>7;
		}
	}

	repeat(false>true) {
		return;
	}

	//test equality mismatch
	c = 6 == true;

	//test equality functions
	test1(4,test1==snake);
	test1(5,test1!=snake);
	test1(4,pear()==snake());
	test1(6,snake()!=pear());
	test1(test1(3,test1(5,true)==7),test1(5,false)==test1(6,true));	
	
	//empty return
	return;
	//bad return value
	return test1(true,true);
	return a+c;
	
}
